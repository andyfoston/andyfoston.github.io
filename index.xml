<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Andy's Blog</title><link>/</link><description>Recent content on Andy's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 26 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Processing Kenesis Firehose logs for Splunk</title><link>/posts/splunk-firehose-lambda/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/splunk-firehose-lambda/</guid><description>&lt;p>For a project at work, we needed to set up Kinesis Firehose to send logs from a provider’s logging
infrastructure (New Relic) into our logging infrastructure.&lt;/p>
&lt;p>This by itself partly solved our use case, but there was a huge amount of logs that were coming
in which was essentially noise, and the logs that were coming in were for both nonproduction and
production and they were being routed to the same index.&lt;/p></description><content>&lt;p>For a project at work, we needed to set up Kinesis Firehose to send logs from a provider’s logging
infrastructure (New Relic) into our logging infrastructure.&lt;/p>
&lt;p>This by itself partly solved our use case, but there was a huge amount of logs that were coming
in which was essentially noise, and the logs that were coming in were for both nonproduction and
production and they were being routed to the same index.&lt;/p>
&lt;p>There were many ways we could have solved this:&lt;/p>
&lt;ol>
&lt;li>By asking New Relic to set up filtering/routing on their side (not ideal as we are not the owners of
this account and it depends on 3rd parties doing this work for us)&lt;/li>
&lt;li>Configuring our Splunk Heavy Forwarder to preprocess these before forwarding to Splunk Cloud,
but this wasn’t a redundant service and would have meant that if the Heavy Forwarder had issues,
then we’d lose logging for some time.&lt;/li>
&lt;/ol>
&lt;p>In the end, we decided to use a Golang lambda to process these. To be honest, I found the
documentation a little sparse for doing this and figured it could be a good opportunity to help
others who are trying to do something similar to me.&lt;/p>
&lt;h2 id="skeleton-lambda-example">Skeleton lambda example&lt;/h2>
&lt;p>Some of this is probably documented elsewhere, but let&amp;rsquo;s start off with a skeleton lambda:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">handleRequest&lt;/span>(&lt;span style="color:#a6e22e">evnt&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseEvent&lt;/span>) (&lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;InvocationID: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">InvocationID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;DeliveryStreamArn: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">DeliveryStreamArn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Region: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">Region&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">Records&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;RecordID: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ApproximateArrivalTimestamp: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">ApproximateArrivalTimestamp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponseRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span> = &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Result&lt;/span> = &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseTransformedStateOk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span> = &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">Records&lt;/span> = append(&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">Records&lt;/span>, &lt;span style="color:#a6e22e">transformedRecord&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lambda&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">handleRequest&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This snippet essentially does nothing to the records, but it provides a starting point to begin
processing these records.&lt;/p>
&lt;h3 id="support-routing-records-to-splunk-indexes-other-than-the-default">Support routing records to Splunk indexes other than the default&lt;/h3>
&lt;p>It is possible to inject an index name into the payload for Splunk, however there are a
few things that need to be done first.&lt;/p>
&lt;p>Firstly, the Splunk HEC needs to have permission to write to all indexes that you plan to use
here. If you do not, Splunk will likely reject them and they&amp;rsquo;ll likely end up being written
to the S3 bucket for unprocessable events (assuming you&amp;rsquo;ve set this up).&lt;/p>
&lt;p>The other thing is that the &amp;lsquo;Raw endpoint&amp;rsquo; will ignore the index parameter, and it&amp;rsquo;ll just become part
of the logging payload stored in Splunk.&lt;/p>
&lt;p>To fix this, you&amp;rsquo;ll need to change the Splunk endpoint type to use an &amp;lsquo;Event endpoint&amp;rsquo;. However, this
requires some more changes to our lambda in order to work:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">formatRecordForSplunk&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">RawMessage&lt;/span>, &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">RawMessage&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">data&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;timestamp&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;sourcetype&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">RawMessage&lt;/span>(&lt;span style="color:#e6db74">`&amp;#34;_json&amp;#34;`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;host&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">data&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;cluster&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;source&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">data&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;eventType&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">event&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>), &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to marshal event \&amp;#34;%s\&amp;#34;. Error: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">event&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;index&amp;#34;&lt;/span>] = []byte(&lt;span style="color:#a6e22e">index&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">marshalledResponse&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>), &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to marshal splunk record \&amp;#34;%s\&amp;#34;. Error %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">marshalledResponse&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">processRecord&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseRecord&lt;/span>) (&lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponseRecord&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">RawMessage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponseRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span> = &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Result&lt;/span> = &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseTransformedStateOk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span> = &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Result&lt;/span> = &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseTransformedStateFailed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cluster&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;cluster&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(string(&lt;span style="color:#a6e22e">cluster&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;dev&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">index&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;dev_index&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">splunkRecord&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">formatRecordForSplunk&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">index&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Result&lt;/span> = &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseTransformedStateFailed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span> = &lt;span style="color:#a6e22e">splunkRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">handleRequest&lt;/span>(&lt;span style="color:#a6e22e">evnt&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseEvent&lt;/span>) (&lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;InvocationID: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">InvocationID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;DeliveryStreamArn: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">DeliveryStreamArn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Region: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">Region&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">evnt&lt;/span>.&lt;span style="color:#a6e22e">Records&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;RecordID: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ApproximateArrivalTimestamp: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">ApproximateArrivalTimestamp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseResponseRecord&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span> = &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">RecordID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Result&lt;/span> = &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KinesisFirehoseTransformedStateOk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transformedRecord&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span> = &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">Records&lt;/span> = append(&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">Records&lt;/span>, &lt;span style="color:#a6e22e">transformedRecord&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lambda&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">handleRequest&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This returns an object containing a few key fields that are required by Splunk, like the &lt;code>source&lt;/code>, &lt;code>sourcetype&lt;/code>, &lt;code>host&lt;/code>, &lt;code>time&lt;/code>
and optionally the &lt;code>index&lt;/code> field, the actual event payload is then written to the &lt;code>event&lt;/code> field.&lt;/p>
&lt;h3 id="dropping-records">Dropping records&lt;/h3>
&lt;p>From the above, you may have noticed lines like &lt;code>transformedRecord.Result = events.KinesisFirehoseTransformedStateFailed&lt;/code> lines.
The &lt;code>...StateFailed&lt;/code> triggers Firehose to write the log to the backup destination (probably an S3 bucket).&lt;/p>
&lt;p>However, if you want to drop events, you can return the event payload as normal, but set the &lt;code>Result&lt;/code> to &lt;code>events.KinesisFirehoseTransformedStateDropped&lt;/code>
this&amp;rsquo;ll trigger the event to not be forwared to Splunk and not to be written to the backup destination either.&lt;/p>
&lt;h3 id="disclaimer">Disclaimer&lt;/h3>
&lt;p>The code in here is a heavy stripped down and refactored version of what we&amp;rsquo;re using for our lambda, so these versions have not
actually been tested directly, but should hopefully provide a basis to start from.&lt;/p></content></item><item><title>About Me</title><link>/about/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>/about/</guid><description>&lt;p>My name is Andy and I&amp;rsquo;m a software developer and SRE.&lt;/p>
&lt;p>My main programming language is Python, but I also work with Go and I&amp;rsquo;m interested/played with Rust as well.&lt;/p>
&lt;p>I live in Bracknell, UK with my wife, Amy, and our 4 kids: Kian, Orla, Quinn and Lyra&lt;/p>
&lt;img src="/img/family.jpg" alt="Family photo with my wife and 4 kids" class="center" style="border-radius: 8px; border: 20px solid var(--accent); padding: 20px" /></description><content>&lt;p>My name is Andy and I&amp;rsquo;m a software developer and SRE.&lt;/p>
&lt;p>My main programming language is Python, but I also work with Go and I&amp;rsquo;m interested/played with Rust as well.&lt;/p>
&lt;p>I live in Bracknell, UK with my wife, Amy, and our 4 kids: Kian, Orla, Quinn and Lyra&lt;/p>
&lt;img src="/img/family.jpg" alt="Family photo with my wife and 4 kids" class="center" style="border-radius: 8px; border: 20px solid var(--accent); padding: 20px" /></content></item><item><title>Curriculum Vitae</title><link>/cv/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>/cv/</guid><description>&lt;h3 id="personal-information">Personal Information:&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Name:&lt;/strong> Andrew Foston&lt;/li>
&lt;li>&lt;strong>Email:&lt;/strong> andy &amp;lsquo;at&amp;rsquo; foston.me&lt;/li>
&lt;li>&lt;strong>Date of Birth:&lt;/strong> 17th August 1982&lt;/li>
&lt;li>&lt;strong>Driving Licence:&lt;/strong> Full, clean.&lt;/li>
&lt;li>&lt;strong>LinkedIn Profile:&lt;/strong> &lt;a href="https://uk.linkedin.com/in/andyfoston">https://uk.linkedin.com/in/andyfoston&lt;/a>&lt;/li>
&lt;li>&lt;strong>GitHub Profile:&lt;/strong> &lt;a href="https://github.com/andyfoston">https://github.com/andyfoston&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="notable-skills">Notable Skills:&lt;/h3>
&lt;ul>
&lt;li>Kubernetes/Istio&lt;/li>
&lt;li>IaC tools, like: Terraform, Packer &amp;amp; Ansible.&lt;/li>
&lt;li>Python/Django/Flask&lt;/li>
&lt;li>Linux&lt;/li>
&lt;/ul>
&lt;h3 id="education">Education:&lt;/h3>
&lt;ul>
&lt;li>07/05/05 – 21/02/12 BSc (Honours) Open – Open University&lt;/li>
&lt;li>30/09/06 – 31/12/08 Diploma in Computing – Open University&lt;/li>
&lt;li>07/05/05 – 31/07/06 Certificate in Computing and Mathematics – Open University&lt;/li>
&lt;li>2000 – 2001 BTEC HNC Computing and Software Engineering (Incomplete)&lt;/li>
&lt;li>1999 – 2000 City &amp;amp; Guilds GNVQ Coding &amp;amp; Programming in ‘c’&lt;/li>
&lt;/ul>
&lt;h3 id="career-summary">Career Summary:&lt;/h3>
&lt;p>&lt;strong>Oct 19 - Present day, Tesco Mobile, Slough&lt;/strong>&lt;br>
&lt;strong>&lt;strong>Run &amp;amp; Operate Engineer (DevOps Engineer)&lt;/strong>&lt;/strong>&lt;/p></description><content>&lt;h3 id="personal-information">Personal Information:&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Name:&lt;/strong> Andrew Foston&lt;/li>
&lt;li>&lt;strong>Email:&lt;/strong> andy &amp;lsquo;at&amp;rsquo; foston.me&lt;/li>
&lt;li>&lt;strong>Date of Birth:&lt;/strong> 17th August 1982&lt;/li>
&lt;li>&lt;strong>Driving Licence:&lt;/strong> Full, clean.&lt;/li>
&lt;li>&lt;strong>LinkedIn Profile:&lt;/strong> &lt;a href="https://uk.linkedin.com/in/andyfoston">https://uk.linkedin.com/in/andyfoston&lt;/a>&lt;/li>
&lt;li>&lt;strong>GitHub Profile:&lt;/strong> &lt;a href="https://github.com/andyfoston">https://github.com/andyfoston&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="notable-skills">Notable Skills:&lt;/h3>
&lt;ul>
&lt;li>Kubernetes/Istio&lt;/li>
&lt;li>IaC tools, like: Terraform, Packer &amp;amp; Ansible.&lt;/li>
&lt;li>Python/Django/Flask&lt;/li>
&lt;li>Linux&lt;/li>
&lt;/ul>
&lt;h3 id="education">Education:&lt;/h3>
&lt;ul>
&lt;li>07/05/05 – 21/02/12 BSc (Honours) Open – Open University&lt;/li>
&lt;li>30/09/06 – 31/12/08 Diploma in Computing – Open University&lt;/li>
&lt;li>07/05/05 – 31/07/06 Certificate in Computing and Mathematics – Open University&lt;/li>
&lt;li>2000 – 2001 BTEC HNC Computing and Software Engineering (Incomplete)&lt;/li>
&lt;li>1999 – 2000 City &amp;amp; Guilds GNVQ Coding &amp;amp; Programming in ‘c’&lt;/li>
&lt;/ul>
&lt;h3 id="career-summary">Career Summary:&lt;/h3>
&lt;p>&lt;strong>Oct 19 - Present day, Tesco Mobile, Slough&lt;/strong>&lt;br>
&lt;strong>&lt;strong>Run &amp;amp; Operate Engineer (DevOps Engineer)&lt;/strong>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Solely responsible for supporting AWS infrastructure, including multiple Kubernetes clusters and various EC2 machines using tools like Terraform, Packer and Helm.&lt;/li>
&lt;li>Implementing a service mesh (Istio) for greater visibility and control of traffic passing through the infrastructure.&lt;/li>
&lt;li>Deploying updates to tools and Tesco Mobile services.&lt;/li>
&lt;li>Maintaining Jenkins and GitHub actions CI/CD pipelines&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Aug 19 - Oct 19, Tesco Mobile, Slough&lt;/strong>&lt;br>
&lt;strong>Developer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Contributing to services used as part of the Tesco Mobile’s sales platform.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Sep 18 - Aug 19, UKCloud Ltd, Farnborough&lt;/strong>&lt;br>
&lt;strong>Software Engineer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Developing tools to automate invoice generation and reporting&lt;/li>
&lt;li>Linux configuration automation using Ansible&lt;/li>
&lt;li>Completing code reviews for members of my team and for non-developer teams across the business.&lt;/li>
&lt;li>Integration of monitoring tools into a “single pane of glass” monitoring tool using custom extensions written in JavaScript.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Mar 16 - Sep 18, Memset Ltd, Cranleigh&lt;/strong>&lt;br>
&lt;strong>Senior Python Developer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Developing tools to automate Linux and network infrastructure configuration.&lt;/li>
&lt;li>Developing new products to offer to our customers.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Notable projects include:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Developed a product to support site failover and traffic distribution using BGP to advertise or drop routes based on user-defined health checks.&lt;/li>
&lt;li>Re-write of switch VLAN configuration generator to enable unit testing, support for VLANs on LAG groups, multi-chassis LAG and new switch models.&lt;/li>
&lt;li>Maintenance of the Linux firewall configuration generator, and adding features such as policy routing.&lt;/li>
&lt;li>Automating configuration of our new monitoring tool (Zabbix)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Apr 15 - Feb 16, iPass UK Ltd, London&lt;/strong>&lt;br>
&lt;strong>Python Django Developer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Developed tools to help deploy new features to all customers&lt;/li>
&lt;li>Acted as an escalation point for bug fixes&lt;/li>
&lt;li>Automated custom reports for customers&lt;/li>
&lt;li>Built internal use frameworks to reduce large amounts of boilerplate code.&lt;/li>
&lt;li>Improved integration with Django using basic Django features - such as Django forms, messaging, database routers, test runners and fixed 500 error reporting.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Feb 14 - Apr 15, Memset Ltd, Cranleigh&lt;/strong>&lt;br>
&lt;strong>Python DevOps Engineer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Developing and maintaining tools to automate deploying and configuring virtual and physical servers.&lt;/li>
&lt;li>Migrating legacy Perl scripts to Python and to use Django ORM.&lt;/li>
&lt;li>Writing unit tests to ensure tools function correctly.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Notable projects include&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Adding support for Xen virtual servers to be allocated to more than one vLAN (including automating routing, switch and Xen configuration).&lt;/li>
&lt;li>Adding support for Xen PVHVM virtual machines.&lt;/li>
&lt;li>Adding support for redundant cabling to physical servers.&lt;/li>
&lt;li>Automate customer penetration testing and reporting using Nessus.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Mar 13 – Dec 13, BlackBerry, Slough&lt;/strong>&lt;br>
&lt;strong>NOC Unix Administrator (3rd line)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Providing 3rd line support to the NOC, and assisting with monitoring and other roles when short-staffed.&lt;/li>
&lt;li>Completing more significant and larger projects to assist the NOC members with troubleshooting common issues within the Blackberry network, including the development of a Python CGI tool to assist with tracing messages through the BlackBerry infrastructure.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Oct 12 – Mar 13, BlackBerry, Slough&lt;/strong>&lt;br>
&lt;strong>Acting NOC Systems Administrator (3rd line)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Providing 3rd line support to the NOC, and assisting with monitoring and other roles when short-staffed.&lt;/li>
&lt;li>Completing more significant and larger projects to assist the NOC members with troubleshooting common issues within the Blackberry network, including the development of a Python CGI tool to assist with tracing messages through the BlackBerry infrastructure.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Dec 11 – Oct 12, BlackBerry, Slough&lt;/strong>&lt;br>
&lt;strong>NOC Operations Administrator (2nd line)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Provide 2nd line support to &amp;lsquo;NOC Operators&amp;rsquo;, and work on tickets to resolve issues within the prescribed SLAs.&lt;/li>
&lt;li>Take on 1st line roles such as monitoring on occasions such as being short-staffed.&lt;/li>
&lt;li>Executing pre-planned changes to the Blackberry Network.&lt;/li>
&lt;li>Taking an active role on troubleshooting conference calls, by providing information and answers to questions and requests posed by Senior and Specialist members of the team, as well the pro-active investigation of the cause of and impact of these issues.&lt;/li>
&lt;li>Development of Python-based CLI tools to aid investigation of common complaints, as well as to develop a greater understanding of the inner workings of the Blackberry network&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Oct 10 – Dec 11, BlackBerry, Slough&lt;/strong>&lt;br>
&lt;strong>NOC Operator (1st line)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Responsible for monitoring the Blackberry Network, as well as resolving known issues as per the documented procedures.&lt;/li>
&lt;li>Troubleshooting issues, as well as escalating issues to senior members of the NOC and other specialist teams.&lt;/li>
&lt;li>Scheduling troubleshooting conference calls with both external and internal parties.&lt;/li>
&lt;li>Documenting steps taken by all parties on troubleshooting calls, to be used for establishing the root cause analysis for impacting issues.&lt;/li>
&lt;li>Developing a command-line Java tool to aid troubleshooting of issues within the Blackberry Network.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Apr 09 – Sep 10, 2e2 UK Limited, Reading&lt;/strong>&lt;br>
&lt;strong>NOC Engineer&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Monitoring of customers’ Cisco Data, Voice and Security products, as well as servers and other IT equipment.&lt;/li>
&lt;li>Investigation and remote repair of faults; organising field engineers to attend faults that cannot be resolved remotely.&lt;/li>
&lt;li>Performing daily and nightly tasks, such as LES circuit availability checks, CUCM backup verifications.&lt;/li>
&lt;li>Completing changes on customers’ live equipment, such as static route changes and SNMP configuration.&lt;/li>
&lt;/ul></content></item></channel></rss>